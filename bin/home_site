#!/usr/bin/env node
'use strict';
/**
 * Module dependencies.
 */

let app = require('../app');
const SECRET_SETTINGS = require('./secret_settings');
const PORT = normalizePort(SECRET_SETTINGS.PORT);
let server = null;

if (SECRET_SETTINGS.USE_SSL) {
  let https = require('https');
  let fs = require('fs');
  const KEY = fs.readFileSync(SECRET_SETTINGS.KEY_PATH);
  const CERT = fs.readFileSync(SECRET_SETTINGS.CERTIFICATE_PATH);
  const CA = fs.readFileSync(SECRET_SETTINGS.CA_PATH);
  const HTTPS_OPTIONS = {
    key: KEY,
    cert: CERT,
    ca: CA
  };
  /**
   * Create HTTPS server.
   */
  server = https.createServer(HTTPS_OPTIONS, app);
}
else {
  let http = require('http');
  server = http.createServer(app);
}

app.set('port', PORT);



/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('NodeJS server listening to port: ', PORT);
}
